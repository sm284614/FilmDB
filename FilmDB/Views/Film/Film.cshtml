@using FilmDB.Models.Database
@model IEnumerable<Film>
@{
	ViewData["Title"] = "Films";
}
<div class="container">
	<div class="d-flex justify-content-between align-items-center">
		<h1>Film List</h1>
		<form id="filmSearchForm" class="d-flex">
			<input type="text" id="filmSearchQuery" class="form-control me-2" placeholder="Search by title" required />
			<button type="submit" class="btn btn-primary">Search</button>
		</form>
	</div>
	@if (ViewBag.GenreList != null)
	{
		<div class="col-12 mx-auto">
			@foreach (Genre genre in ViewBag.GenreList)
			{
				<a data-id="@genre.GenreId" class="btn genre-button btn-secondary w-8 m-x">
					@genre.Name
				</a>
			}
		</div>
		<div id="yearSlider" class="my-2 col-11"></div>
	}
	<div id="filmTableContainer" class="contentTable">
		@await Html.PartialAsync("_FilmTable", (IEnumerable<Film>)Model)
	</div>
</div>
<script src="/_framework/aspnetcore-browser-refresh.js"></script>
<script src="https://cdn.jsdelivr.net/npm/nouislider/distribute/nouislider.min.js"></script>
<script>
	document.addEventListener("DOMContentLoaded", function () {
		let selectedGenres = []; // Store selected genre IDs

		document.querySelectorAll(".genre-button").forEach(button => {
			button.addEventListener("click", function () {
				const genreId = parseInt(this.dataset.id);

				// Toggle genre selection
				if (selectedGenres.includes(genreId))
				{
					selectedGenres = selectedGenres.filter(id => id !== genreId); // Remove if already selected
					this.classList.remove("btn-primary");
					this.classList.add("btn-secondary"); // Highlight selected
					updateFilmTable();
				}
				else
				{
					if (selectedGenres.length < 3)
					{
						selectedGenres.push(genreId); // Add if not selected
						this.classList.remove("btn-secondary"); // Reset color
						this.classList.add("btn-primary");
						updateFilmTable();
					}
					else
					{
						this.classList.add("btn-danger"); // Temporarily add red color
						setTimeout(() => this.classList.remove("btn-danger"), 250); // Remove after 0.5 sec
					}
				}
			});
		});

		function updateFilmTable() {
			const queryString = selectedGenres.length > 0 ? `?genreIds=${selectedGenres.join("&genreIds=")}` : "";
			const container = document.getElementById("filmTableContainer")
			container.innerHTML = "<p>Loading...</p>";
			fetch(`/Film/FilterFilmsByGenreBitwise${queryString}`)
				.then(response => response.text())
				.then(data => {
					container.innerHTML = data;
				})
				.catch(error => console.error("Error loading films:", error));
		}

		document.getElementById("filmSearchForm").addEventListener("submit", function (event) {
			event.preventDefault(); // Prevent full page reload
			const query = document.getElementById("filmSearchQuery").value;
			fetch(`/Film/FilmSearch?query=${encodeURIComponent(query)}`)
				.then(response => response.text())
				.then(data => {
					document.getElementById("filmTableContainer").innerHTML = data;
				})
				.catch(error => console.error("Error loading films:", error));
		});

		// Year slider logic
		var slider = document.getElementById("yearSlider");
		noUiSlider.create(slider, {
			start: [1910, 2025],
			connect: true,
			range: { 'min': 1910, 'max': 2025 },
			step: 1
		});

		// Function to update the text labels on the handles
		function updateHandleLabels(values) {
			var minYearLabel = document.getElementById("minYearLabel");
			var maxYearLabel = document.getElementById("maxYearLabel");

			if (minYearLabel && maxYearLabel) {
				minYearLabel.textContent = Math.round(values[0]);  // Update text for the first handle
				maxYearLabel.textContent = Math.round(values[1]);  // Update text for the second handle
			}
		}

		// Event listener to update labels when the slider is updated
		slider.noUiSlider.on("update", function(values) {
			updateHandleLabels(values);
		});

		// Wait for the slider to be fully initialized before accessing the handles
		slider.noUiSlider.on('start', function () {
			// Initial setup: Create the labels and place them on the handles
			var minLabel = document.createElement("div");
			minLabel.id = "minYearLabel";
			minLabel.classList.add("slider-label"); // Add a class for styling
			slider.querySelector('.noUi-handle-lower').appendChild(minLabel);

			var maxLabel = document.createElement("div");
			maxLabel.id = "maxYearLabel";
			maxLabel.classList.add("slider-label"); // Add a class for styling
			slider.querySelector('.noUi-handle-upper').appendChild(maxLabel);

			// Initial call to set labels
			updateHandleLabels(slider.noUiSlider.values);
		});

		//var selectedYears = document.getElementById("selectedYears");
		slider.noUiSlider.on("set", function (values) {
			var minYear = Math.round(values[0]);
			var maxYear = Math.round(values[1]);
			//selectedYears.textContent = `${minYear} - ${maxYear}`;
			// Filter films by selected year range
			var rows = document.querySelectorAll("tr[data-year]");  // Get all rows with a data-year attribute
			var visibleFilmCount = 0;
			rows.forEach(function (row) {
				var filmYear = parseInt(row.getAttribute("data-year"));
				if (filmYear >= minYear && filmYear <= maxYear) {
					row.style.display = "";  // Show the row
					visibleFilmCount++;
				} else {
					row.style.display = "none";  // Hide the row
				}
			});
			// Update the film count in the span
			var filmCountElement = document.getElementById("film-count");
			if (minYear != maxYear)
			{
				filmCountElement.textContent = `(${minYear} to ${maxYear}: ${visibleFilmCount} films)`;
			}
			else
			{
				filmCountElement.textContent = `(${minYear}: ${visibleFilmCount} films)`;
			}			
		});
	});
</script>